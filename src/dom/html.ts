import { TypedHTML as ITypedHTML } from '../../';
import { TypedHTMLElement, TypedHTMLElementChildren } from './builder';

export const TypedHTML: typeof ITypedHTML = [
  // lib.dom.d.ts
  "a",
  "applet",
  "area",
  "audio",
  "base",
  "basefont",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "col",
  "colgroup",
  "data",
  "datalist",
  "del",
  "dir",
  "div",
  "dl",
  "embed",
  "fieldset",
  "font",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "hr",
  "html",
  "iframe",
  "img",
  "input",
  "ins",
  "isindex",
  "label",
  "legend",
  "li",
  "link",
  "listing",
  "map",
  "marquee",
  "menu",
  "meta",
  "meter",
  "nextid",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "script",
  "select",
  "source",
  "span",
  "style",
  "table",
  "tbody",
  "td",
  "template",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "ul",
  "video",
  "x-ms-webview",
  "xmp",
  // other
  'abbr',
  'acronym',
  'address',
  'article',
  'aside',
  'b',
  'bdo',
  'big',
  'center',
  'cite',
  'code',
  'dd',
  'dfn',
  'dt',
  'em',
  'figcaption',
  'figure',
  'footer',
  'header',
  'hgroup',
  'i',
  'kbd',
  'keygen',
  'mark',
  'nav',
  'nobr',
  'noframes',
  'noscript',
  'plaintext',
  'rt',
  'ruby',
  's',
  'samp',
  'section',
  'small',
  'strike',
  'strong',
  'sub',
  'sup',
  'tt',
  'u',
  'var',
  'wbr',
  // custom
  'custom'
]
  .reduce((obj, tag) => (
    obj[tag] =
      <C extends TypedHTMLElementChildren>
      (attrs?: { [name: string]: string; }, children?: C, factory?: () => HTMLElement)
      : TypedHTMLElement<string, HTMLElement, C> =>
          !attrs || !children || typeof children === 'function'
            ? new TypedHTMLElement((<any>children || (() => document.createElement(tag)))(), <C><any>attrs)
            : new TypedHTMLElement(attribute(attrs, (factory || (() => document.createElement(tag)))()), children),
    obj
  ), <typeof ITypedHTML>{});

function attribute<E extends HTMLElement>(attrs: { [name: string]: string }, element: E): E {
  void Object.keys(attrs)
    .forEach(name =>
      void element.setAttribute(name, attrs[name] || ''));
  return element;
}
